"""
Notification plugin for SwanLab.
Used for sending notifications to users.
"""

from swankit.callback import SwanKitCallback
import swanlab
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Optional, Dict, Any, Tuple
import hmac
import hashlib
import base64
from datetime import datetime
import requests
from abc import ABC, abstractmethod


class PrintCallback(SwanKitCallback):
    """Basic callback for printing experiment status information."""

    def on_init(self, proj_name: str, workspace: str, logdir: str = None, *args, **kwargs):
        """Called when experiment initialization completes."""
        print(f"üöÄ My callback: on_init: {proj_name}, {workspace}, {logdir}, {kwargs}")

    def on_stop(self, error: str = None, *args, **kwargs):
        """Called when experiment stops or encounters error."""
        status = f"with error: {error}" if error else "successfully"
        print(f"üöÄ My callback: Experiment stopped {status}")

    def __str__(self):
        return "PrintCallback"


class EmailCallback(SwanKitCallback):
    """Email notification callback with bilingual support."""

    DEFAULT_TEMPLATES = {
        "en": {
            "subject_success": "SwanLab | Your experiment completed successfully",
            "subject_error": "SwanLab | Your experiment encountered an error",
            "body_success": "Your SwanLab experiment has completed successfully.\n",
            "body_error": "Your SwanLab experiment encountered an error: {error}\n",
            "link_text": "Project: {project}\nWorkspace: {workspace}\nName: {exp_name}\nDescription: {description}\nExperiment Link: {link}",
        },
        "zh": {
            "subject_success": "SwanLab | ÊÇ®ÁöÑÂÆûÈ™åÂ∑≤ÊàêÂäüÂÆåÊàê",
            "subject_error": "SwanLab | ÊÇ®ÁöÑÂÆûÈ™åÈÅáÂà∞ÈîôËØØ",
            "body_success": "ÊÇ®ÁöÑ SwanLab ÂÆûÈ™åÂ∑≤ÊàêÂäüÂÆåÊàê„ÄÇ\n",
            "body_error": "ÊÇ®ÁöÑ SwanLab ÂÆûÈ™åÈÅáÂà∞ÈîôËØØ: {error}\n",
            "link_text": "È°πÁõÆ: {project}\nÂ∑•‰ΩúÂå∫: {workspace}\nÂÆûÈ™åÂêç: {exp_name}\nÊèèËø∞: {description}\nÂÆûÈ™åÈìæÊé•: {link}",
        },
    }

    def __init__(
        self,
        sender_email: str,
        receiver_email: str,
        password: str,
        smtp_server: str = "smtp.gmail.com",
        port: int = 587,
        language: str = "en",
    ):
        """
        Initialize email callback configuration.

        :param sender_email: SMTP account email address
        :param receiver_email: Recipient email address
        :param password: SMTP account password
        :param smtp_server: SMTP server address
        :param port: SMTP server port
        :param language: Email content language (en/zh)
        """
        self.sender_email = sender_email
        self.receiver_email = receiver_email
        self.password = password
        self.smtp_server = smtp_server
        self.port = port
        self.language = language

    def _create_email_content(self, error: Optional[str] = None) -> Dict[str, str]:
        """Generate bilingual email content based on experiment status."""
        templates = self.DEFAULT_TEMPLATES[self.language]

        # Determine email subject and body based on error status
        if error:
            subject = templates["subject_error"]
            body = templates["body_error"].format(error=error)
        else:
            subject = templates["subject_success"]
            body = templates["body_success"]

        # Add experiment link if running in cloud mode
        exp_link = swanlab.get_url()
        if exp_link:
            body += templates["link_text"].format(
                project=self.project,
                workspace=self.workspace,
                exp_name=self.exp_name,
                description=self.description,
                link=exp_link,
            )

        return subject, body

    def send_email(self, subject: str, body: str) -> None:
        """Handle SMTP connection and email sending."""
        try:
            # Create email message
            msg = MIMEMultipart()
            msg["From"] = self.sender_email
            msg["To"] = self.receiver_email
            msg["Subject"] = subject
            msg.attach(MIMEText(body, "plain", "utf-8"))
            # Establish secure connection
            with smtplib.SMTP(self.smtp_server, self.port) as server:
                server.starttls()
                server.login(self.sender_email, self.password)
                server.send_message(msg)
                print("‚úÖ Email sent successfully!")

        except smtplib.SMTPException as e:
            print(f"‚ùå Email sending failed: {str(e)}")

    def on_init(self, proj_name: str, workspace: str, logdir: str = None, *args, **kwargs):
        self.project = proj_name
        self.workspace = workspace

    def before_init_experiment(
        self,
        run_id: str,
        exp_name: str,
        description: str,
        num: int,
        colors: Tuple[str, str],
        *args,
        **kwargs,
    ):
        self.run_id = run_id
        self.exp_name = exp_name
        self.description = description

    def on_stop(self, error: str = None, *args, **kwargs):
        """Trigger email notification when experiment stops."""
        print("üìß Preparing email notification...")
        subject, body = self._create_email_content(error)
        self.send_email(subject, body)

    def __str__(self):
        return "EmailCallback"


WEBHOOK_DEFAULT_TEMPLATES = {
    "en": {
        "title": "SwanLab Message Notification\n",
        "msg_success": "SwanLab | Your experiment completed successfully\n",
        "msg_error": "Your SwanLab experiment encountered an error: {error}\n",
        "link_text": "Project: {project}\nWorkspace: {workspace}\nName: {exp_name}\nDescription: {description}\nExperiment Link: {link}",
    },
    "zh": {
        "title": "SwanLab Ê∂àÊÅØÈÄöÁü•\n",
        "msg_success": "SwanLab | ÊÇ®ÁöÑÂÆûÈ™åÂ∑≤ÊàêÂäüÂÆåÊàê\n",
        "msg_error": "ÊÇ®ÁöÑ SwanLab ÂÆûÈ™åÈÅáÂà∞ÈîôËØØ: {error}\n",
        "link_text": "È°πÁõÆ: {project}\nÂ∑•‰ΩúÂå∫: {workspace}\nÂÆûÈ™åÂêç: {exp_name}\nÊèèËø∞: {description}\nÂÆûÈ™åÈìæÊé•: {link}",
    },
}


class WebhookCallback(SwanKitCallback, ABC):
    """ÊäΩË±°Âü∫Á±ªÔºåÁî®‰∫éÂêÑÁßçwebhookÈÄöÁü•ÂõûË∞É"""

    def __init__(self, webhook_url: str, secret: Optional[str] = None, language: str = "zh"):
        self.webhook_url = webhook_url
        self.secret = secret
        self.language = language
        self._init_bot()

    @abstractmethod
    def _init_bot(self) -> None:
        """ÂàùÂßãÂåñÊú∫Âô®‰∫∫ÂÆû‰æã"""
        pass

    def _create_content(self, error: Optional[str] = None) -> str:
        """ÂàõÂª∫ÈÄöÁü•ÂÜÖÂÆπ"""
        templates = WEBHOOK_DEFAULT_TEMPLATES[self.language]
        content_text: str = f"{templates['title']}"
        if error:
            content_text += templates["msg_error"].format(error=error)
        else:
            content_text += templates["msg_success"]
        exp_link = swanlab.get_url()
        if exp_link:
            content_text += templates["link_text"].format(
                project=self.project,
                workspace=self.workspace,
                exp_name=self.exp_name,
                description=self.description,
                link=exp_link,
            )
        return content_text

    @abstractmethod
    def send_msg(self, content: str) -> None:
        """ÂèëÈÄÅÊ∂àÊÅØÁöÑÂÖ∑‰ΩìÂÆûÁé∞"""
        pass

    def on_init(self, proj_name: str, workspace: str, logdir: str = None, *args, **kwargs):
        self.project = proj_name
        self.workspace = workspace

    def before_init_experiment(
        self,
        run_id: str,
        exp_name: str,
        description: str,
        num: int,
        colors: Tuple[str, str],
        *args,
        **kwargs,
    ):
        self.run_id = run_id
        self.exp_name = exp_name
        self.description = description

    def on_stop(self, error: str = None, *args, **kwargs):
        print(f"ü§ñ Preparing {self.__class__.__name__} notification...")
        content = self._create_content(error)
        self.send_msg(content)


class LarkBot:
    def __init__(self, webhook_url: str, secret: Optional[str] = None):
        self.webhook_url = webhook_url
        self.secret = secret

    def gen_sign(self, timesteamp: int) -> str:
        """
        docs: https://open.feishu.cn/document/client-docs/bot-v3/add-custom-bot?lang=zh-CN#9ff32e8e
        If the user has configured the signature verification function, this method is required to generate the signature
        """
        if not self.secret:
            raise ValueError("secret is required")
        string_to_sign: str = f"{timesteamp}\n{self.secret}"
        hmac_code = hmac.new(string_to_sign.encode("utf-8"), digestmod=hashlib.sha256).digest()
        return base64.b64encode(hmac_code).decode("utf-8")


class LarkCallback(WebhookCallback):
    """Lark notification callback with bilingual support."""

    def _init_bot(self) -> None:
        self.bot = LarkBot(self.webhook_url, self.secret)

    def send_msg(self, content: str) -> None:
        timestamp: int = int(datetime.now().timestamp())
        json_params: Dict[str, Any] = {
            "timestamp": timestamp,
            "msg_type": "text",
            "content": {"text": content},
        }
        if self.bot.secret:
            json_params["sign"] = self.bot.gen_sign(timestamp)
        resp = requests.post(self.bot.webhook_url, json=json_params)
        resp.raise_for_status()
        result: Dict[str, Any] = resp.json()
        if result.get("code") and result["code"] != 0:
            print(f"‚ùå LarkBot sending failed: {result.get('msg')}")
            return
        print("‚úÖ LarkBot sending successfully")

    def __str__(self):
        return "LarkBotCallback"


class DingTalkBot:
    """DingTalk notification callback with bilingual support."""

    def __init__(self, webhook_url: str, secret: Optional[str] = None):
        self.webhook_url = webhook_url
        self.secret = secret
        self.start_time = datetime.now().timestamp()  # Âä†Á≠æÊó∂ÔºåËØ∑Ê±ÇÊó∂Èó¥Êà≥‰∏éËØ∑Ê±ÇÊó∂Èó¥‰∏çËÉΩË∂ÖËøá1Â∞èÊó∂ÔºåÁî®‰∫éÂÆöÊó∂Êõ¥Êñ∞Á≠æÂêç
        if self.secret is not None and self.secret.startswith("SEC"):
            self.update_webhook_url()

    def _check_sign(self) -> None:
        """
        DingTalk ‰∏≠ÁöÑÁ≠æÂêçÂíåÊó∂Èó¥Êà≥ÈúÄË¶ÅÊîæÂú® url ‰∏≠Ôºå‰∏îÁ≠æÂêç‰∏≠ÁöÑÊó∂Èó¥Êà≥‰∏éËØ∑Ê±ÇÊó∂Èó¥Êà≥ÁöÑÂ∑ÆÂÄº‰∏çËÉΩË∂ÖËøá 1 Â∞èÊó∂
        """
        ts_now = datetime.now().timestamp()
        if ts_now - self.start_time >= 3600 and self.secret is not None and self.secret.startswith("SEC"):
            self.start_time = ts_now
            self.update_webhook_url()

    def update_webhook_url(self) -> None:
        """
        DingTalk ‰∏≠ÁöÑ webhook url ÈúÄË¶ÅÊõ¥Êñ∞Á≠æÂêçÂíåÊó∂Èó¥Êà≥
        """
        """
        docs: https://open.dingtalk.com/document/
        DingTalk ‰∏≠ÁöÑÁ≠æÂêçÂíåÊó∂Èó¥Êà≥ÈúÄË¶ÅÊîæÂú® url ‰∏≠Ôºå‰∏îÁ≠æÂêç‰∏≠ÁöÑÊó∂Èó¥Êà≥‰∏éËØ∑Ê±ÇÊó∂Èó¥Êà≥ÁöÑÂ∑ÆÂÄº‰∏çËÉΩË∂ÖËøá 1 Â∞èÊó∂
        """
        if (not self.secret) or (not self.secret.startswith("SEC")):
            raise ValueError("secret is invalid")
        timestamp = round(self.start_time * 1000)
        # Ê†πÊçÆÈíâÈíâÊñáÊ°£ÔºåÊ≠£Á°ÆÁöÑÁ≠æÂêçÊ†ºÂºèÂ∫î‰∏∫ timestamp\nsecret
        string_to_sign = f"{timestamp}\n{self.secret}"
        hmac_code = hmac.new(self.secret.encode(), string_to_sign.encode(), digestmod=hashlib.sha256).digest()
        sign = base64.b64encode(hmac_code).decode("utf-8")

        # ÊèêÂèñÂü∫Á°Ä URLÔºàÁßªÈô§ÊóßÁöÑÊó∂Èó¥Êà≥ÂíåÁ≠æÂêçÂèÇÊï∞Ôºâ
        base_url = self.webhook_url.split("&timestamp=")[0] if "&timestamp=" in self.webhook_url else self.webhook_url

        # Ê∑ªÂä†ÂàÜÈöîÁ¨¶Ôºà? Êàñ &Ôºâ
        separator = "?" if "?" not in base_url else "&"
        if separator == "&" and base_url.endswith("&"):
            separator = ""

        # ÊûÑÂª∫Êñ∞ÁöÑ URL
        self.webhook_url = f"{base_url}{separator}timestamp={timestamp}&sign={sign}"


class DingTalkCallback(WebhookCallback):
    """DingTalk notification callback with bilingual support."""

    def _init_bot(self) -> None:
        self.bot = DingTalkBot(self.webhook_url, self.secret)

    def send_msg(self, content: str) -> None:
        self.bot._check_sign()

        data = {
            "msgtype": "text",
            "text": {"content": content},
        }
        resp = requests.post(self.bot.webhook_url, json=data)
        resp.raise_for_status()
        result: Dict[str, Any] = resp.json()
        if result.get("errcode") and result["errcode"] != 0:
            print(f"‚ùå DingTalkBot sending failed: {result.get('errmsg')}")
            return
        print("‚úÖ DingTalkBot sending successfully")

    def __str__(self):
        return "DingTalkBotCallback"


class WXWorkBot:
    """
    WxWork notification callback with bilingual support.
    docs: https://developer.work.weixin.qq.com/document/path/91770
    """

    def __init__(self, webhook_url: str):
        # WxWork does not need secret
        self.webhook_url = webhook_url


class WXWorkCallback(WebhookCallback):
    """WxWork notification callback with bilingual support."""

    def _init_bot(self) -> None:
        self.bot = WXWorkBot(self.webhook_url)

    def send_msg(self, content: str) -> None:
        data = {
            "msgtype": "text",
            "text": {"content": content},
        }
        resp = requests.post(self.bot.webhook_url, json=data)
        resp.raise_for_status()
        result: Dict[str, Any] = resp.json()
        if result.get("errcode") and result["errcode"] != 0:
            print(f"‚ùå WXWorkBot sending failed: {result.get('errmsg')}")
            return
        print("‚úÖ WXWorkBot sending successfully")

    def __str__(self):
        return "WXWorkBotCallback"
