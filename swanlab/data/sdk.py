#!/usr/bin/env python
# -*- coding: utf-8 -*-
r"""
@DATE: 2024-01-01 18:00:04
@File: swanlab/data/sdk.py
@IDE: vscode
@Description:
    在此处封装swanlab在日志记录模式下的各种接口
"""
import asyncio
import atexit
import os
import sys
import traceback
from datetime import datetime
from typing import Dict
from typing import Optional, Union
from .modules import DataType
from .run import SwanLabRun, SwanLabConfig, register
from .utils.file import check_dir_and_create, formate_abs_path
from ..db import Project, connect
from ..env import init_env, ROOT, get_swanlab_folder
from ..log import swanlog
from ..utils import FONT, check_load_json_yaml
from ..utils.key import get_key
from swanlab.api import create_http, get_http, code_login, LoginInfo, terminal_login
from swanlab.api.upload import upload_logs
from swanlab.package import version_limit, get_package_version, get_host_api, get_host_web
from swanlab.error import KeyFileError
from swanlab.cloud import LogSnifferTask, ThreadPool

run: Optional["SwanLabRun"] = None
"""Global runtime instance. After the user calls finish(), run will be set to None."""

inited: bool = False
"""Indicates whether init() has been called in the current process."""

_config: Optional["SwanLabConfig"] = SwanLabConfig(None)
"""
Allows users to record experiment configurations through swanlab.config.
Before calling the init() function, config cannot be read or written, even if it is a SwanLabConfig object.
After calling the init() function, swanlab.config is equivalent to run.config.
Configuration information synchronization is achieved through class variables.
When the run object is initialized, it will operate on the SwanLabConfig object to write the configuration.
"""

login_info = None
"""
User login information
"""

exit_in_cloud = False
"""
Indicates whether the program is exiting in the cloud environment.
"""


def login(api_key: str):
    """
    Login to SwanLab Cloud. If you already have logged in, you can use this function to relogin.
    Every time you call this function, the previous login information will be overwritten.
    [Note that] this function should be called before `init`.

    Parameters
    ----------
    api_key : str
        authentication key.
    """
    if inited:
        raise RuntimeError("You must call swanlab.login() before using init()")
    global login_info
    login_info = asyncio.run(code_login(api_key))


def init(
    experiment_name: str = None,
    description: str = None,
    config: Union[dict, str] = None,
    logdir: str = None,
    suffix: str = "default",
    cloud: bool = True,
    project: str = None,
    workspace: str = None,
    load: str = None,
    **kwargs,
) -> SwanLabRun:
    """
    Start a new run to track and log. Once you have called this function, you can use 'swanlab.log' to log data to
    the current run. Meanwhile, you can use 'swanlab.finish' to finish the current run and close the current
    experiment. After calling this function, SwanLab will begin to record the console output of the current process,
    and register a callback function to the exit function.

    Parameters
    ----------
    experiment_name : str, optional
        The experiment name you currently have open. If this parameter is not provided,
        SwanLab will generate one for you by default.
    description : str, optional
        The experiment description you currently have open,
        used for a more detailed introduction or labeling of the current experiment.
        If you do not provide this parameter, you can modify it later in the web interface.
    config : Union[dict, str], optional
        If you provide as a dict, it will be used as the configuration of the current experiment.
        If you provide as a string, SwanLab will read the configuration from the file.
        And the configuration file must be in the format of `json` or `yaml`.
        Anyway, you can modify the configuration later after this function is called.
    logdir : str, optional
        The folder will store all the log information generated during the execution of SwanLab.
        If the parameter is None,
        SwanLab will generate a folder named "swanlog" in the same path as the code execution to store the data.
        If you want to visualize the generated log files,
        simply run the command `swanlab watch` in the same path where the code is executed
        (without entering the "swanlog" folder).
        You can also specify your own folder, but you must ensure that the folder exists and preferably does not contain
        anything other than data generated by Swanlab.
        In this case, if you want to view the logs,
        you must use something like `swanlab watch -l ./your_specified_folder` to specify the folder path.
    suffix : str, optional
        The suffix of the experiment name, the default is 'default'.
        If this parameter is 'default', suffix will be '%b%d-%h-%m-%s_<hostname>'(example:'Feb03_14-45-37_windowsX'),
        which represents the current time.
        example: experiment_name = 'example', suffix = 'default' -> 'example_Feb03_14-45-37_windowsX';
        If this parameter is None, no suffix will be added.
        If this parameter is a string, the suffix will be the string you provided.
        Attention: experiment_name + suffix must be unique, otherwise the experiment will not be created.
    cloud : bool, optional
        Whether to use the cloud mode, the default is True.
        If you use the cloud mode, the log file will be stored in the cloud, which will still be saved locally.
        If you are not using cloud mode, the `project` and `entity` fields are invalid.
    project : str, optional
        The project name of the current experiment, the default is None,
        which means the current project name is the same as the current working directory.
        If you are using cloud mode, you must provide the project name.
    workspace : str, optional
        Where the current project is located, it can be an organization or a user (currently only supports yourself).
        The default is None, which means the current entity is the same as the current user.
    load : str, optional
        If you pass this parameter,SwanLab will search for the configuration file you specified
        (which must be in JSON or YAML format)
        and automatically fill in some explicit parameters of this function for you
        (excluding parameters in `**kwargs` and the parameters if they are None).
        In terms of priority, if the parameters passed to init are `None`,
        SwanLab will attempt to replace them from the configuration file you provided;
        otherwise, it will use the parameters you passed as the definitive ones.
    """
    global run, inited
    # 如果已经初始化过了，直接返回run
    if inited:
        swanlog.warning("You have already initialized a run, the init function will be ignored")
        return run
    # ---------------------------------- 一些变量、格式检查 ----------------------------------
    # 默认实验名称为当前目录名
    project = (project or os.path.basename(os.getcwd())) if cloud else None
    # 如果传入了load，则加载load文件，如果load文件不存在，报错
    if load:
        load_data = check_load_json_yaml(load, load)
        # 尝试更改传入的参数为None的情况，如果传入的参数不是None，不做任何操作
        experiment_name = _load_data(load_data, "experiment_name", experiment_name)
        description = _load_data(load_data, "description", description)
        config = _load_data(load_data, "config", config)
        logdir = _load_data(load_data, "logdir", logdir)
        suffix = _load_data(load_data, "suffix", suffix)
        cloud = _load_data(load_data, "cloud", cloud)
        project = _load_data(load_data, "project", project)
        workspace = _load_data(load_data, "workspace", workspace)
    # 初始化logdir参数，接下来logdir被设置为绝对路径且当前程序有写权限
    logdir = _init_logdir(logdir)
    # 初始化confi参数
    config = _init_config(config)
    # 检查logdir内文件的版本，如果<=0.1.4则报错
    version_limit(logdir, mode="init")
    # 初始化环境变量
    init_env()
    # 历史实验总数
    exp_num = None
    # ---------------------------------- 用户登录、格式、权限校验 ----------------------------------
    global login_info
    http = None
    if login_info is None and cloud:
        # 用户登录
        login_info = _login_in_init()
        # 初始化会话信息
        http = create_http(login_info)
        # 获取当前项目信息
        http.mount_project(project, workspace)

    # 连接本地数据库，要求路径必须存在，但是如果数据库文件不存在，会自动创建
    connect(autocreate=True)
    # 初始化项目数据库
    Project.init(os.path.basename(os.getcwd()))
    # 注册实验
    run = register(
        experiment_name=experiment_name,
        description=description,
        config=config,
        log_level=kwargs.get("log_level", "info"),
        suffix=suffix,
        exp_num=exp_num,
    )
    # ---------------------------------- 注册实验，开启线程 ----------------------------------
    if cloud:
        # 初始化、挂载线程池
        pool = ThreadPool()
        sniffer = LogSnifferTask(run.settings.files_dir)
        pool.create_thread(sniffer.task, name="sniffer", callback=sniffer.callback)
        # FIXME not a good way to mount a thread pool
        run.settings.pool = pool
        swanlog.set_pool(pool)
        # 注册实验信息
        get_http().mount_exp(exp_name=run.settings.exp_name,
                             colors=run.settings.exp_colors,
                             description=run.settings.description)
    # ---------------------------------- 异常处理、程序清理 ----------------------------------
    sys.excepthook = except_handler
    # 注册清理函数
    atexit.register(_clean_handler)
    # ---------------------------------- 终端输出 ----------------------------------
    if not cloud and not (project is None and workspace is None):
        swanlog.warning("The `project` or `workspace` parameters are invalid in non-cloud mode")
    swanlog.debug("SwanLab Runtime has initialized")
    swanlog.debug("SwanLab will take over all the print information of the terminal from now on")
    swanlog.info("Tracking run with swanlab version " + get_package_version())
    swanlog.info("Run data will be saved locally in " + FONT.magenta(FONT.bold(formate_abs_path(run.settings.run_dir))))
    not cloud and swanlog.info("Experiment_name: " + FONT.yellow(run.settings.exp_name))
    # 云端版本有一些额外的信息展示
    cloud and swanlog.info("👋 Hi " + FONT.bold(FONT.default(login_info.username)) + ", welcome to swanlab!")
    cloud and swanlog.info("Syncing run " + FONT.yellow(run.settings.exp_name) + " to the cloud")
    swanlog.info(
        "🌟 Run `"
        + FONT.bold("swanlab watch -l {}".format(formate_abs_path(run.settings.swanlog_dir)))
        + "` to view SwanLab Experiment Dashboard locally"
    )
    if cloud:
        project_url = get_host_web() + f"/@{http.groupname}/{http.projname}"
        experiment_url = project_url + f"/runs/{http.exp_id}"
        swanlog.info("🏠 View project at " + FONT.blue(FONT.underline(project_url)))
        swanlog.info("🚀 View run at " + FONT.blue(FONT.underline(experiment_url)))
    inited = True
    return run


def log(data: Dict[str, DataType], step: int = None):
    """
    Log a row of data to the current run.

    Parameters
    ----------
    data : Dict[str, DataType]
        Data must be a dict.
        The key must be a string with 0-9, a-z, A-Z, " ", "_", "-", "/".
        The value must be a `float`, `float convertible object`, `int` or `swanlab.data.BaseType`.
    step : int, optional
        The step number of the current data, if not provided, it will be automatically incremented.
        If step is duplicated, the data will be ignored.
    """
    if not inited:
        raise RuntimeError("You must call swanlab.data.init() before using log()")
    if inited and run is None:
        return swanlog.error("After calling finish(), you can no longer log data to the current experiment")

    ll = run.log(data, step)
    # swanlog.reset_temporary_logging()
    return ll


def finish():
    """
    Finish the current run and close the current experiment
    Normally, swanlab will run this function automatically,
    but you can also execute it manually and mark the experiment as 'completed'.
    Once the experiment is marked as 'completed', no more data can be logged to the experiment by 'swanlab.log'.
    """
    global run, inited
    if not inited:
        raise RuntimeError("You must call swanlab.data.init() before using finish()")
    if run is None:
        return swanlog.error("After calling finish(), you can no longer close the current experiment")
    # FIXME not a good way to handle this
    run._success()
    swanlog.set_success()
    swanlog.reset_console()
    run.settings.pool and not exit_in_cloud and _before_exit_in_cloud(True)
    run = None


def _login_in_init() -> LoginInfo:
    """在init函数中登录"""
    # 1. 如果没有登录，提示登录
    # 2. 如果登录了，发起请求，如果请求失败，重新登录，返回步骤1
    key = None
    try:
        key = get_key(os.path.join(get_swanlab_folder(), ".netrc"), get_host_api())[2]
    except KeyFileError:
        fd = sys.stdin.fileno()
        # 不是标准终端，无法控制其回显
        if not os.isatty(fd):
            raise KeyFileError("The key file is not found, call `swanlab.login()` or use `swanlab login` ")
    return terminal_login(key)


def _init_logdir(logdir: str) -> str:
    """
    处理通过init传入的logdir存在的一些情况
    """
    # 如果传入了logdir，则将logdir设置为环境变量，代表日志文件存放的路径
    if logdir is not None:
        try:
            logdir = check_dir_and_create(logdir)
        except ValueError:
            raise ValueError("logdir must be a str.")
        except IOError:
            raise IOError("logdir must be a path and have Write permission.")
        os.environ[ROOT] = logdir
    # 如果没有传入logdir，则使用默认的logdir, 即当前工作目录下的swanlog文件夹，但是需要保证目录存在
    else:
        logdir = os.path.abspath("swanlog")
        try:
            os.makedirs(logdir, exist_ok=True)
            if not os.access(logdir, os.W_OK):
                raise IOError
        except IOError:
            raise IOError("logdir must have Write permission.")
    return logdir


def _init_config(config: Union[dict, str]):
    """初始化传入的config参数"""
    if isinstance(config, dict) or config is None:
        return config
    print(FONT.swanlab("The parameter config is loaded from the configuration file: {}".format(config)))
    return check_load_json_yaml(config, "config")


def _load_data(load_data: dict, key: str, value):
    """从load_data中加载数据，如果value不是None"""
    if value is not None:
        # tip = "The parameter {} is loaded from the configuration file: {}".format(FONT.bold(key), value)
        # print(FONT.swanlab(tip))
        return value
    d = load_data.get(key, None)
    # if d is not None:
    #     tip = "The parameter {} is loaded from the configuration file: {}".format(FONT.bold(key), d)
    #     print(FONT.swanlab(tip))
    return d


def _before_exit_in_cloud(success: bool, error: str = None):
    """
    在云端环境下，退出之前的处理，需要依次执行线程池中的回调

    Parameters
    ----------
    success : bool
        实验是否成功
    """
    global exit_in_cloud
    if exit_in_cloud or run is None or run.settings.pool is None:
        return
    # 标志已经退出（需要在下面的逻辑之前标志）
    exit_in_cloud = True
    sys.excepthook = except_handler

    async def _():
        # 关闭线程池，等待上传线程完成
        await run.settings.pool.finish()
        # 上传错误日志
        if error is not None:
            await upload_logs([e + '\n' for e in error.split('\n')], level='ERROR')
        await asyncio.sleep(1)

    asyncio.run(FONT.loading("Waiting for uploading complete", _(), interval=0.5))
    return


def _clean_handler():
    """定义清理函数"""
    if run is None:
        return swanlog.debug("SwanLab Runtime has been cleaned manually.")
    # 如果没有错误
    if not swanlog.is_error and not exit_in_cloud:
        run.settings.pool and _before_exit_in_cloud(True)
        swanlog.info("Experiment {} has completed".format(FONT.yellow(run.settings.exp_name)))
        # FIXME not a good way to handle this
        run._success()
        swanlog.set_success()
        swanlog.reset_console()


# 定义异常处理函数
def except_handler(tp, val, tb):
    """定义异常处理函数"""
    if run is None:
        return swanlog.debug("SwanLab Runtime has been cleaned manually.")
    if exit_in_cloud:
        # FIXME not a good way to fix '\n' problem
        print("")
        swanlog.error('Aborted uploading by user')
        sys.exit(1)
    # 如果是KeyboardInterrupt异常
    if tp == KeyboardInterrupt:
        swanlog.error("KeyboardInterrupt by user")
    else:
        swanlog.error("Error happened while training")
    # 标记实验失败
    run._fail()
    swanlog.set_error()
    # 记录异常信息
    # 追踪信息
    trace_list = traceback.format_tb(tb)
    html = repr(tp) + "\n"
    html += repr(val) + "\n"
    for line in trace_list:
        html += line + "\n"
    if os.path.exists(run.settings.error_path):
        swanlog.warning("Error log file already exists, append error log to it")
    # 写入日志文件
    with open(run.settings.error_path, "a") as fError:
        print(datetime.now(), file=fError)
        print(html, file=fError)
    # 重置控制台记录器
    swanlog.reset_console()
    run.settings.pool and not exit_in_cloud and _before_exit_in_cloud(False, error=str(html))
    if tp != KeyboardInterrupt:
        raise tp(val)
