// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.0
// source: swanlab/proto/record/v1/record.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TeardownRecord_State int32

const (
	TeardownRecord_STATE_SUCCESS TeardownRecord_State = 0 // Experiment teardown successfully
	TeardownRecord_STATE_FAILED  TeardownRecord_State = 1 // Experiment teardown failed (some error occurred)
)

// Enum value maps for TeardownRecord_State.
var (
	TeardownRecord_State_name = map[int32]string{
		0: "STATE_SUCCESS",
		1: "STATE_FAILED",
	}
	TeardownRecord_State_value = map[string]int32{
		"STATE_SUCCESS": 0,
		"STATE_FAILED":  1,
	}
)

func (x TeardownRecord_State) Enum() *TeardownRecord_State {
	p := new(TeardownRecord_State)
	*p = x
	return p
}

func (x TeardownRecord_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeardownRecord_State) Descriptor() protoreflect.EnumDescriptor {
	return file_swanlab_proto_record_v1_record_proto_enumTypes[0].Descriptor()
}

func (TeardownRecord_State) Type() protoreflect.EnumType {
	return &file_swanlab_proto_record_v1_record_proto_enumTypes[0]
}

func (x TeardownRecord_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeardownRecord_State.Descriptor instead.
func (TeardownRecord_State) EnumDescriptor() ([]byte, []int) {
	return file_swanlab_proto_record_v1_record_proto_rawDescGZIP(), []int{1, 0}
}

// Column class, such as "CUSTOM", "SYSTEM"
type ColumnRecord_ColumClass int32

const (
	ColumnRecord_COL_CUSTOM ColumnRecord_ColumClass = 0 // Custom column, user-defined
	ColumnRecord_COL_SYSTEM ColumnRecord_ColumClass = 1 // System column, swanlab predefined
)

// Enum value maps for ColumnRecord_ColumClass.
var (
	ColumnRecord_ColumClass_name = map[int32]string{
		0: "COL_CUSTOM",
		1: "COL_SYSTEM",
	}
	ColumnRecord_ColumClass_value = map[string]int32{
		"COL_CUSTOM": 0,
		"COL_SYSTEM": 1,
	}
)

func (x ColumnRecord_ColumClass) Enum() *ColumnRecord_ColumClass {
	p := new(ColumnRecord_ColumClass)
	*p = x
	return p
}

func (x ColumnRecord_ColumClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnRecord_ColumClass) Descriptor() protoreflect.EnumDescriptor {
	return file_swanlab_proto_record_v1_record_proto_enumTypes[1].Descriptor()
}

func (ColumnRecord_ColumClass) Type() protoreflect.EnumType {
	return &file_swanlab_proto_record_v1_record_proto_enumTypes[1]
}

func (x ColumnRecord_ColumClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnRecord_ColumClass.Descriptor instead.
func (ColumnRecord_ColumClass) EnumDescriptor() ([]byte, []int) {
	return file_swanlab_proto_record_v1_record_proto_rawDescGZIP(), []int{3, 0}
}

// Column type, such as "FLOAT", "IMAGE".
type ColumnRecord_ColumnType int32

const (
	ColumnRecord_COL_FLOAT    ColumnRecord_ColumnType = 0
	ColumnRecord_COL_IMAGE    ColumnRecord_ColumnType = 1
	ColumnRecord_COL_AUDIO    ColumnRecord_ColumnType = 2
	ColumnRecord_COL_TEXT     ColumnRecord_ColumnType = 3
	ColumnRecord_COL_OBJECT3D ColumnRecord_ColumnType = 4
	ColumnRecord_COL_MOLECULE ColumnRecord_ColumnType = 5
	ColumnRecord_COL_ECHARTS  ColumnRecord_ColumnType = 6
)

// Enum value maps for ColumnRecord_ColumnType.
var (
	ColumnRecord_ColumnType_name = map[int32]string{
		0: "COL_FLOAT",
		1: "COL_IMAGE",
		2: "COL_AUDIO",
		3: "COL_TEXT",
		4: "COL_OBJECT3D",
		5: "COL_MOLECULE",
		6: "COL_ECHARTS",
	}
	ColumnRecord_ColumnType_value = map[string]int32{
		"COL_FLOAT":    0,
		"COL_IMAGE":    1,
		"COL_AUDIO":    2,
		"COL_TEXT":     3,
		"COL_OBJECT3D": 4,
		"COL_MOLECULE": 5,
		"COL_ECHARTS":  6,
	}
)

func (x ColumnRecord_ColumnType) Enum() *ColumnRecord_ColumnType {
	p := new(ColumnRecord_ColumnType)
	*p = x
	return p
}

func (x ColumnRecord_ColumnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnRecord_ColumnType) Descriptor() protoreflect.EnumDescriptor {
	return file_swanlab_proto_record_v1_record_proto_enumTypes[2].Descriptor()
}

func (ColumnRecord_ColumnType) Type() protoreflect.EnumType {
	return &file_swanlab_proto_record_v1_record_proto_enumTypes[2]
}

func (x ColumnRecord_ColumnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnRecord_ColumnType.Descriptor instead.
func (ColumnRecord_ColumnType) EnumDescriptor() ([]byte, []int) {
	return file_swanlab_proto_record_v1_record_proto_rawDescGZIP(), []int{3, 1}
}

// Section type, used to distinguish the section type of the chart.
type ColumnRecord_SectionType int32

const (
	ColumnRecord_SEC_PINNED ColumnRecord_SectionType = 0
	ColumnRecord_SEC_HIDDEN ColumnRecord_SectionType = 1
	ColumnRecord_SEC_PUBLIC ColumnRecord_SectionType = 2
	ColumnRecord_SEC_SYSTEM ColumnRecord_SectionType = 3
	ColumnRecord_SEC_CUSTOM ColumnRecord_SectionType = 4
)

// Enum value maps for ColumnRecord_SectionType.
var (
	ColumnRecord_SectionType_name = map[int32]string{
		0: "SEC_PINNED",
		1: "SEC_HIDDEN",
		2: "SEC_PUBLIC",
		3: "SEC_SYSTEM",
		4: "SEC_CUSTOM",
	}
	ColumnRecord_SectionType_value = map[string]int32{
		"SEC_PINNED": 0,
		"SEC_HIDDEN": 1,
		"SEC_PUBLIC": 2,
		"SEC_SYSTEM": 3,
		"SEC_CUSTOM": 4,
	}
)

func (x ColumnRecord_SectionType) Enum() *ColumnRecord_SectionType {
	p := new(ColumnRecord_SectionType)
	*p = x
	return p
}

func (x ColumnRecord_SectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnRecord_SectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_swanlab_proto_record_v1_record_proto_enumTypes[3].Descriptor()
}

func (ColumnRecord_SectionType) Type() protoreflect.EnumType {
	return &file_swanlab_proto_record_v1_record_proto_enumTypes[3]
}

func (x ColumnRecord_SectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnRecord_SectionType.Descriptor instead.
func (ColumnRecord_SectionType) EnumDescriptor() ([]byte, []int) {
	return file_swanlab_proto_record_v1_record_proto_rawDescGZIP(), []int{3, 2}
}

// Log level enum
type LogRecord_LogLevel int32

const (
	LogRecord_INFO  LogRecord_LogLevel = 0
	LogRecord_WARN  LogRecord_LogLevel = 1
	LogRecord_ERROR LogRecord_LogLevel = 2
)

// Enum value maps for LogRecord_LogLevel.
var (
	LogRecord_LogLevel_name = map[int32]string{
		0: "INFO",
		1: "WARN",
		2: "ERROR",
	}
	LogRecord_LogLevel_value = map[string]int32{
		"INFO":  0,
		"WARN":  1,
		"ERROR": 2,
	}
)

func (x LogRecord_LogLevel) Enum() *LogRecord_LogLevel {
	p := new(LogRecord_LogLevel)
	*p = x
	return p
}

func (x LogRecord_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogRecord_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_swanlab_proto_record_v1_record_proto_enumTypes[4].Descriptor()
}

func (LogRecord_LogLevel) Type() protoreflect.EnumType {
	return &file_swanlab_proto_record_v1_record_proto_enumTypes[4]
}

func (x LogRecord_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogRecord_LogLevel.Descriptor instead.
func (LogRecord_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_swanlab_proto_record_v1_record_proto_rawDescGZIP(), []int{6, 0}
}

// SetupRecord is a record containing information about the setup process in swanlab.
type SetupRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the project
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The workspace of the project
	Workspace string `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// The visibility of the project
	Public bool `protobuf:"varint,3,opt,name=public,proto3" json:"public,omitempty"`
	// The experiment name
	ExperimentName string `protobuf:"bytes,4,opt,name=experiment_name,json=experimentName,proto3" json:"experiment_name,omitempty"`
	// The experiment description
	ExperimentDescription string `protobuf:"bytes,5,opt,name=experiment_description,json=experimentDescription,proto3" json:"experiment_description,omitempty"`
	// The experiment tags
	ExperimentTags []string `protobuf:"bytes,6,rep,name=experiment_tags,json=experimentTags,proto3" json:"experiment_tags,omitempty"`
	// The experiment start time
	StartTime     string `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetupRecord) Reset() {
	*x = SetupRecord{}
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetupRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupRecord) ProtoMessage() {}

func (x *SetupRecord) ProtoReflect() protoreflect.Message {
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupRecord.ProtoReflect.Descriptor instead.
func (*SetupRecord) Descriptor() ([]byte, []int) {
	return file_swanlab_proto_record_v1_record_proto_rawDescGZIP(), []int{0}
}

func (x *SetupRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetupRecord) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *SetupRecord) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *SetupRecord) GetExperimentName() string {
	if x != nil {
		return x.ExperimentName
	}
	return ""
}

func (x *SetupRecord) GetExperimentDescription() string {
	if x != nil {
		return x.ExperimentDescription
	}
	return ""
}

func (x *SetupRecord) GetExperimentTags() []string {
	if x != nil {
		return x.ExperimentTags
	}
	return nil
}

func (x *SetupRecord) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

// TeardownRecord is a record containing information about the teardown process in swanlab.
// It may not exist if the process was killed or terminated unexpectedly.
type TeardownRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The state of the teardown process
	State TeardownRecord_State `protobuf:"varint,1,opt,name=state,proto3,enum=swanlab.proto.record.v1.TeardownRecord_State" json:"state,omitempty"`
	// The error message if the teardown process failed
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The time when the teardown process was completed
	EndTime       string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeardownRecord) Reset() {
	*x = TeardownRecord{}
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeardownRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeardownRecord) ProtoMessage() {}

func (x *TeardownRecord) ProtoReflect() protoreflect.Message {
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeardownRecord.ProtoReflect.Descriptor instead.
func (*TeardownRecord) Descriptor() ([]byte, []int) {
	return file_swanlab_proto_record_v1_record_proto_rawDescGZIP(), []int{1}
}

func (x *TeardownRecord) GetState() TeardownRecord_State {
	if x != nil {
		return x.State
	}
	return TeardownRecord_STATE_SUCCESS
}

func (x *TeardownRecord) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *TeardownRecord) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

// RuntimeRecord is the record that contains information about the runtime environment of swanlab.
type RuntimeRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The conda environment file name
	CondaFilename *string `protobuf:"bytes,1,opt,name=conda_filename,json=condaFilename,proto3,oneof" json:"conda_filename,omitempty"`
	// The pip requirements file name
	PipFilename *string `protobuf:"bytes,2,opt,name=pip_filename,json=pipFilename,proto3,oneof" json:"pip_filename,omitempty"`
	// The user config file name
	ConfigFilename *string `protobuf:"bytes,3,opt,name=config_filename,json=configFilename,proto3,oneof" json:"config_filename,omitempty"`
	// The swanlab automatically generated file name, meaning the metadata of the runtime environment.
	MetadataFilename *string `protobuf:"bytes,4,opt,name=metadata_filename,json=metadataFilename,proto3,oneof" json:"metadata_filename,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RuntimeRecord) Reset() {
	*x = RuntimeRecord{}
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeRecord) ProtoMessage() {}

func (x *RuntimeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeRecord.ProtoReflect.Descriptor instead.
func (*RuntimeRecord) Descriptor() ([]byte, []int) {
	return file_swanlab_proto_record_v1_record_proto_rawDescGZIP(), []int{2}
}

func (x *RuntimeRecord) GetCondaFilename() string {
	if x != nil && x.CondaFilename != nil {
		return *x.CondaFilename
	}
	return ""
}

func (x *RuntimeRecord) GetPipFilename() string {
	if x != nil && x.PipFilename != nil {
		return *x.PipFilename
	}
	return ""
}

func (x *RuntimeRecord) GetConfigFilename() string {
	if x != nil && x.ConfigFilename != nil {
		return *x.ConfigFilename
	}
	return ""
}

func (x *RuntimeRecord) GetMetadataFilename() string {
	if x != nil && x.MetadataFilename != nil {
		return *x.MetadataFilename
	}
	return ""
}

// ColumnRecord is the type record for each metric in swanlab.
type ColumnRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Column ID
	ColumnKey string `protobuf:"bytes,1,opt,name=column_key,json=columnKey,proto3" json:"column_key,omitempty"`
	// Column name
	ColumnName  string                  `protobuf:"bytes,2,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ColumnClass ColumnRecord_ColumClass `protobuf:"varint,3,opt,name=column_class,json=columnClass,proto3,enum=swanlab.proto.record.v1.ColumnRecord_ColumClass" json:"column_class,omitempty"`
	ColumnType  ColumnRecord_ColumnType `protobuf:"varint,4,opt,name=column_type,json=columnType,proto3,enum=swanlab.proto.record.v1.ColumnRecord_ColumnType" json:"column_type,omitempty"`
	// If the column is error, a json object
	ColumnError *structpb.Struct `protobuf:"bytes,5,opt,name=column_error,json=columnError,proto3" json:"column_error,omitempty"`
	// Section name, such as "train", "test", "valid", "eval", etc.
	SectionName string                   `protobuf:"bytes,6,opt,name=section_name,json=sectionName,proto3" json:"section_name,omitempty"`
	SectionType ColumnRecord_SectionType `protobuf:"varint,7,opt,name=section_type,json=sectionType,proto3,enum=swanlab.proto.record.v1.ColumnRecord_SectionType" json:"section_type,omitempty"`
	// The chart name
	ChartName string `protobuf:"bytes,8,opt,name=chart_name,json=chartName,proto3" json:"chart_name,omitempty"`
	// The chart index, cuid
	ChartIndex string `protobuf:"bytes,9,opt,name=chart_index,json=chartIndex,proto3" json:"chart_index,omitempty"`
	// The Y axis range
	ChartYRange []string `protobuf:"bytes,10,rep,name=chart_y_range,json=chartYRange,proto3" json:"chart_y_range,omitempty"`
	// The metric name
	MetricName string `protobuf:"bytes,11,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	// The metric color, 2 length hex string, such as "FF0000"
	MetricColor   []string `protobuf:"bytes,12,rep,name=metric_color,json=metricColor,proto3" json:"metric_color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnRecord) Reset() {
	*x = ColumnRecord{}
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnRecord) ProtoMessage() {}

func (x *ColumnRecord) ProtoReflect() protoreflect.Message {
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnRecord.ProtoReflect.Descriptor instead.
func (*ColumnRecord) Descriptor() ([]byte, []int) {
	return file_swanlab_proto_record_v1_record_proto_rawDescGZIP(), []int{3}
}

func (x *ColumnRecord) GetColumnKey() string {
	if x != nil {
		return x.ColumnKey
	}
	return ""
}

func (x *ColumnRecord) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ColumnRecord) GetColumnClass() ColumnRecord_ColumClass {
	if x != nil {
		return x.ColumnClass
	}
	return ColumnRecord_COL_CUSTOM
}

func (x *ColumnRecord) GetColumnType() ColumnRecord_ColumnType {
	if x != nil {
		return x.ColumnType
	}
	return ColumnRecord_COL_FLOAT
}

func (x *ColumnRecord) GetColumnError() *structpb.Struct {
	if x != nil {
		return x.ColumnError
	}
	return nil
}

func (x *ColumnRecord) GetSectionName() string {
	if x != nil {
		return x.SectionName
	}
	return ""
}

func (x *ColumnRecord) GetSectionType() ColumnRecord_SectionType {
	if x != nil {
		return x.SectionType
	}
	return ColumnRecord_SEC_PINNED
}

func (x *ColumnRecord) GetChartName() string {
	if x != nil {
		return x.ChartName
	}
	return ""
}

func (x *ColumnRecord) GetChartIndex() string {
	if x != nil {
		return x.ChartIndex
	}
	return ""
}

func (x *ColumnRecord) GetChartYRange() []string {
	if x != nil {
		return x.ChartYRange
	}
	return nil
}

func (x *ColumnRecord) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *ColumnRecord) GetMetricColor() []string {
	if x != nil {
		return x.MetricColor
	}
	return nil
}

// MediaRecord is the record generated by swanlab when parsing each piece of media data.
type MediaRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// record step
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// In which row is the data
	Epoch string `protobuf:"bytes,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The time when the record was created
	CreateTime string `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Key name, corresponding column name, same as ColumnRecord.key
	Key string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// key URL encoded, used to identify the media file
	KeyEncoded string `protobuf:"bytes,5,opt,name=key_encoded,json=keyEncoded,proto3" json:"key_encoded,omitempty"`
	// Key ID, Backend-Independent, related to the indicator storage directory, the storage path is {run_dir}/{kid}/{file_name}.
	Kid string `protobuf:"bytes,6,opt,name=kid,proto3" json:"kid,omitempty"`
	// file name(s)
	Data []string `protobuf:"bytes,7,rep,name=data,proto3" json:"data,omitempty"`
	// more attributes, corresponding to the data, "" means no more attributes
	More          []string `protobuf:"bytes,8,rep,name=more,proto3" json:"more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MediaRecord) Reset() {
	*x = MediaRecord{}
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaRecord) ProtoMessage() {}

func (x *MediaRecord) ProtoReflect() protoreflect.Message {
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaRecord.ProtoReflect.Descriptor instead.
func (*MediaRecord) Descriptor() ([]byte, []int) {
	return file_swanlab_proto_record_v1_record_proto_rawDescGZIP(), []int{4}
}

func (x *MediaRecord) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *MediaRecord) GetEpoch() string {
	if x != nil {
		return x.Epoch
	}
	return ""
}

func (x *MediaRecord) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *MediaRecord) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MediaRecord) GetKeyEncoded() string {
	if x != nil {
		return x.KeyEncoded
	}
	return ""
}

func (x *MediaRecord) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *MediaRecord) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MediaRecord) GetMore() []string {
	if x != nil {
		return x.More
	}
	return nil
}

// ScalarRecord is the record generated by swanlab when parsing each piece of numerical data.
type ScalarRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// record step
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// In which row is the data
	Epoch string `protobuf:"bytes,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The time when the record was created
	CreateTime string `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Key name, corresponding column name
	Key string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// numerical value
	Data          []float32 `protobuf:"fixed32,5,rep,packed,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScalarRecord) Reset() {
	*x = ScalarRecord{}
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarRecord) ProtoMessage() {}

func (x *ScalarRecord) ProtoReflect() protoreflect.Message {
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarRecord.ProtoReflect.Descriptor instead.
func (*ScalarRecord) Descriptor() ([]byte, []int) {
	return file_swanlab_proto_record_v1_record_proto_rawDescGZIP(), []int{5}
}

func (x *ScalarRecord) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *ScalarRecord) GetEpoch() string {
	if x != nil {
		return x.Epoch
	}
	return ""
}

func (x *ScalarRecord) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ScalarRecord) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ScalarRecord) GetData() []float32 {
	if x != nil {
		return x.Data
	}
	return nil
}

// LogRecord is the record generated by swanlab when parsing each piece of terminal log data.
type LogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// In which row is the data
	Epoch string `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Log level
	Level LogRecord_LogLevel `protobuf:"varint,2,opt,name=level,proto3,enum=swanlab.proto.record.v1.LogRecord_LogLevel" json:"level,omitempty"`
	// Log message
	Message       string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRecord) Reset() {
	*x = LogRecord{}
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRecord) ProtoMessage() {}

func (x *LogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_swanlab_proto_record_v1_record_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRecord.ProtoReflect.Descriptor instead.
func (*LogRecord) Descriptor() ([]byte, []int) {
	return file_swanlab_proto_record_v1_record_proto_rawDescGZIP(), []int{6}
}

func (x *LogRecord) GetEpoch() string {
	if x != nil {
		return x.Epoch
	}
	return ""
}

func (x *LogRecord) GetLevel() LogRecord_LogLevel {
	if x != nil {
		return x.Level
	}
	return LogRecord_INFO
}

func (x *LogRecord) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_swanlab_proto_record_v1_record_proto protoreflect.FileDescriptor

const file_swanlab_proto_record_v1_record_proto_rawDesc = "" +
	"\n" +
	"$swanlab/proto/record/v1/record.proto\x12\x17swanlab.proto.record.v1\x1a\x1cgoogle/protobuf/struct.proto\"\xff\x01\n" +
	"\vSetupRecord\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n" +
	"\tworkspace\x18\x02 \x01(\tR\tworkspace\x12\x16\n" +
	"\x06public\x18\x03 \x01(\bR\x06public\x12'\n" +
	"\x0fexperiment_name\x18\x04 \x01(\tR\x0eexperimentName\x125\n" +
	"\x16experiment_description\x18\x05 \x01(\tR\x15experimentDescription\x12'\n" +
	"\x0fexperiment_tags\x18\x06 \x03(\tR\x0eexperimentTags\x12\x1d\n" +
	"\n" +
	"start_time\x18\a \x01(\tR\tstartTime\"\xc3\x01\n" +
	"\x0eTeardownRecord\x12C\n" +
	"\x05state\x18\x01 \x01(\x0e2-.swanlab.proto.record.v1.TeardownRecord.StateR\x05state\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12\x19\n" +
	"\bend_time\x18\x03 \x01(\tR\aendTime\",\n" +
	"\x05State\x12\x11\n" +
	"\rSTATE_SUCCESS\x10\x00\x12\x10\n" +
	"\fSTATE_FAILED\x10\x01\"\x91\x02\n" +
	"\rRuntimeRecord\x12*\n" +
	"\x0econda_filename\x18\x01 \x01(\tH\x00R\rcondaFilename\x88\x01\x01\x12&\n" +
	"\fpip_filename\x18\x02 \x01(\tH\x01R\vpipFilename\x88\x01\x01\x12,\n" +
	"\x0fconfig_filename\x18\x03 \x01(\tH\x02R\x0econfigFilename\x88\x01\x01\x120\n" +
	"\x11metadata_filename\x18\x04 \x01(\tH\x03R\x10metadataFilename\x88\x01\x01B\x11\n" +
	"\x0f_conda_filenameB\x0f\n" +
	"\r_pip_filenameB\x12\n" +
	"\x10_config_filenameB\x14\n" +
	"\x12_metadata_filename\"\xde\x06\n" +
	"\fColumnRecord\x12\x1d\n" +
	"\n" +
	"column_key\x18\x01 \x01(\tR\tcolumnKey\x12\x1f\n" +
	"\vcolumn_name\x18\x02 \x01(\tR\n" +
	"columnName\x12S\n" +
	"\fcolumn_class\x18\x03 \x01(\x0e20.swanlab.proto.record.v1.ColumnRecord.ColumClassR\vcolumnClass\x12Q\n" +
	"\vcolumn_type\x18\x04 \x01(\x0e20.swanlab.proto.record.v1.ColumnRecord.ColumnTypeR\n" +
	"columnType\x12:\n" +
	"\fcolumn_error\x18\x05 \x01(\v2\x17.google.protobuf.StructR\vcolumnError\x12!\n" +
	"\fsection_name\x18\x06 \x01(\tR\vsectionName\x12T\n" +
	"\fsection_type\x18\a \x01(\x0e21.swanlab.proto.record.v1.ColumnRecord.SectionTypeR\vsectionType\x12\x1d\n" +
	"\n" +
	"chart_name\x18\b \x01(\tR\tchartName\x12\x1f\n" +
	"\vchart_index\x18\t \x01(\tR\n" +
	"chartIndex\x12\"\n" +
	"\rchart_y_range\x18\n" +
	" \x03(\tR\vchartYRange\x12\x1f\n" +
	"\vmetric_name\x18\v \x01(\tR\n" +
	"metricName\x12!\n" +
	"\fmetric_color\x18\f \x03(\tR\vmetricColor\",\n" +
	"\n" +
	"ColumClass\x12\x0e\n" +
	"\n" +
	"COL_CUSTOM\x10\x00\x12\x0e\n" +
	"\n" +
	"COL_SYSTEM\x10\x01\"|\n" +
	"\n" +
	"ColumnType\x12\r\n" +
	"\tCOL_FLOAT\x10\x00\x12\r\n" +
	"\tCOL_IMAGE\x10\x01\x12\r\n" +
	"\tCOL_AUDIO\x10\x02\x12\f\n" +
	"\bCOL_TEXT\x10\x03\x12\x10\n" +
	"\fCOL_OBJECT3D\x10\x04\x12\x10\n" +
	"\fCOL_MOLECULE\x10\x05\x12\x0f\n" +
	"\vCOL_ECHARTS\x10\x06\"]\n" +
	"\vSectionType\x12\x0e\n" +
	"\n" +
	"SEC_PINNED\x10\x00\x12\x0e\n" +
	"\n" +
	"SEC_HIDDEN\x10\x01\x12\x0e\n" +
	"\n" +
	"SEC_PUBLIC\x10\x02\x12\x0e\n" +
	"\n" +
	"SEC_SYSTEM\x10\x03\x12\x0e\n" +
	"\n" +
	"SEC_CUSTOM\x10\x04\"\xc7\x01\n" +
	"\vMediaRecord\x12\x14\n" +
	"\x05index\x18\x01 \x01(\tR\x05index\x12\x14\n" +
	"\x05epoch\x18\x02 \x01(\tR\x05epoch\x12\x1f\n" +
	"\vcreate_time\x18\x03 \x01(\tR\n" +
	"createTime\x12\x10\n" +
	"\x03key\x18\x04 \x01(\tR\x03key\x12\x1f\n" +
	"\vkey_encoded\x18\x05 \x01(\tR\n" +
	"keyEncoded\x12\x10\n" +
	"\x03kid\x18\x06 \x01(\tR\x03kid\x12\x12\n" +
	"\x04data\x18\a \x03(\tR\x04data\x12\x12\n" +
	"\x04more\x18\b \x03(\tR\x04more\"\x81\x01\n" +
	"\fScalarRecord\x12\x14\n" +
	"\x05index\x18\x01 \x01(\tR\x05index\x12\x14\n" +
	"\x05epoch\x18\x02 \x01(\tR\x05epoch\x12\x1f\n" +
	"\vcreate_time\x18\x03 \x01(\tR\n" +
	"createTime\x12\x10\n" +
	"\x03key\x18\x04 \x01(\tR\x03key\x12\x12\n" +
	"\x04data\x18\x05 \x03(\x02R\x04data\"\xa9\x01\n" +
	"\tLogRecord\x12\x14\n" +
	"\x05epoch\x18\x01 \x01(\tR\x05epoch\x12A\n" +
	"\x05level\x18\x02 \x01(\x0e2+.swanlab.proto.record.v1.LogRecord.LogLevelR\x05level\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\")\n" +
	"\bLogLevel\x12\b\n" +
	"\x04INFO\x10\x00\x12\b\n" +
	"\x04WARN\x10\x01\x12\t\n" +
	"\x05ERROR\x10\x02B\rZ\vcore/pkg/pbb\x06proto3"

var (
	file_swanlab_proto_record_v1_record_proto_rawDescOnce sync.Once
	file_swanlab_proto_record_v1_record_proto_rawDescData []byte
)

func file_swanlab_proto_record_v1_record_proto_rawDescGZIP() []byte {
	file_swanlab_proto_record_v1_record_proto_rawDescOnce.Do(func() {
		file_swanlab_proto_record_v1_record_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_swanlab_proto_record_v1_record_proto_rawDesc), len(file_swanlab_proto_record_v1_record_proto_rawDesc)))
	})
	return file_swanlab_proto_record_v1_record_proto_rawDescData
}

var file_swanlab_proto_record_v1_record_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_swanlab_proto_record_v1_record_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_swanlab_proto_record_v1_record_proto_goTypes = []any{
	(TeardownRecord_State)(0),     // 0: swanlab.proto.record.v1.TeardownRecord.State
	(ColumnRecord_ColumClass)(0),  // 1: swanlab.proto.record.v1.ColumnRecord.ColumClass
	(ColumnRecord_ColumnType)(0),  // 2: swanlab.proto.record.v1.ColumnRecord.ColumnType
	(ColumnRecord_SectionType)(0), // 3: swanlab.proto.record.v1.ColumnRecord.SectionType
	(LogRecord_LogLevel)(0),       // 4: swanlab.proto.record.v1.LogRecord.LogLevel
	(*SetupRecord)(nil),           // 5: swanlab.proto.record.v1.SetupRecord
	(*TeardownRecord)(nil),        // 6: swanlab.proto.record.v1.TeardownRecord
	(*RuntimeRecord)(nil),         // 7: swanlab.proto.record.v1.RuntimeRecord
	(*ColumnRecord)(nil),          // 8: swanlab.proto.record.v1.ColumnRecord
	(*MediaRecord)(nil),           // 9: swanlab.proto.record.v1.MediaRecord
	(*ScalarRecord)(nil),          // 10: swanlab.proto.record.v1.ScalarRecord
	(*LogRecord)(nil),             // 11: swanlab.proto.record.v1.LogRecord
	(*structpb.Struct)(nil),       // 12: google.protobuf.Struct
}
var file_swanlab_proto_record_v1_record_proto_depIdxs = []int32{
	0,  // 0: swanlab.proto.record.v1.TeardownRecord.state:type_name -> swanlab.proto.record.v1.TeardownRecord.State
	1,  // 1: swanlab.proto.record.v1.ColumnRecord.column_class:type_name -> swanlab.proto.record.v1.ColumnRecord.ColumClass
	2,  // 2: swanlab.proto.record.v1.ColumnRecord.column_type:type_name -> swanlab.proto.record.v1.ColumnRecord.ColumnType
	12, // 3: swanlab.proto.record.v1.ColumnRecord.column_error:type_name -> google.protobuf.Struct
	3,  // 4: swanlab.proto.record.v1.ColumnRecord.section_type:type_name -> swanlab.proto.record.v1.ColumnRecord.SectionType
	4,  // 5: swanlab.proto.record.v1.LogRecord.level:type_name -> swanlab.proto.record.v1.LogRecord.LogLevel
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_swanlab_proto_record_v1_record_proto_init() }
func file_swanlab_proto_record_v1_record_proto_init() {
	if File_swanlab_proto_record_v1_record_proto != nil {
		return
	}
	file_swanlab_proto_record_v1_record_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_swanlab_proto_record_v1_record_proto_rawDesc), len(file_swanlab_proto_record_v1_record_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_swanlab_proto_record_v1_record_proto_goTypes,
		DependencyIndexes: file_swanlab_proto_record_v1_record_proto_depIdxs,
		EnumInfos:         file_swanlab_proto_record_v1_record_proto_enumTypes,
		MessageInfos:      file_swanlab_proto_record_v1_record_proto_msgTypes,
	}.Build()
	File_swanlab_proto_record_v1_record_proto = out.File
	file_swanlab_proto_record_v1_record_proto_goTypes = nil
	file_swanlab_proto_record_v1_record_proto_depIdxs = nil
}
